!function(){"use strict";(()=>{window.addEventListener("load",function(){console.log("window loaded make spinner");let e=document.createElement("div");e.className="lds-grid";for(let n=0;n<9;n++)e.appendChild(document.createElement("div"));e.style.left=window.innerWidth/2-32+"px";let n=document.querySelector("#loading-screen");n.style.width=window.innerWidth+"px",n.style.height=window.innerHeight+"px",n.appendChild(e)},!1)})();var e=function(){var e=new THREE.Matrix4;return function(n,t){t.matrix.copy(n.matrixWorld),t.applyMatrix(e.getInverse(t.parent.matrixWorld))}}();!function(){AFRAME.registerComponent("grabbable",{schema:{origin:{type:"selector"}},init:function(){function n(e){if(e.cancelBubble=!0,!r){r=!0;var n=e.detail.cursorEl;n==o.el.sceneEl&&(n=document.querySelector("[camera]")),o.el.setAttribute("visible",!1),setTimeout(function(){o.el.setAttribute("visible",!0)},20),i(n.object3D),o.originEl.emit("grabStart",e),o.originEl.addState("moving")}}function t(e){r&&(r=!1,o.proxyObject&&(o.proxyObject.parent.remove(o.proxyObject),o.proxyObject=null),o.originEl.setAttribute("position",o.originEl.getAttribute("position")),o.originEl.setAttribute("rotation",o.originEl.getAttribute("rotation")),o.originEl.emit("grabEnd",e),o.originEl.removeState("moving"))}function i(n){o.proxyObject=new THREE.Object3D,o.originEl.visible=!1,setTimeout(function(){o.originEl.visible=!0},1e3),n.add(o.proxyObject),e(o.originEl.object3D,o.proxyObject)}var o=this,r=!1;o.originEl=this.data.origin||this.el,o.proxyObject=null,o.el.classList.add("interactive"),o.el.addEventListener("mousedown",n),AFRAME.utils.device.isMobile()&&o.el.addEventListener("click",function(e){n(e),setTimeout(function(e){document.querySelector("#cam-cursor").setAttribute("material","color: purple"),t(e),setTimeout(function(e){document.querySelector("#cam-cursor").setAttribute("material","color: crimson")},500)},5e3)}),o.el.addEventListener("mouseup",t)},tick:function(){var n=this;n.proxyObject&&(e(n.proxyObject,n.originEl.object3D),n.originEl.setAttribute("position",n.originEl.getAttribute("position")),n.originEl.setAttribute("rotation",n.originEl.getAttribute("rotation")))}})}(),function(){AFRAME.registerComponent("nav-pointer",{init:function(){const e=this.el;e.addEventListener("click",n=>{const t=e.sceneEl.querySelector("[nav-agent]");t&&t.setAttribute("nav-agent",{active:!0,destination:n.detail.intersection.point})}),e.addEventListener("mouseenter",n=>{e.setAttribute("material",{color:"green"})}),e.addEventListener("mouseleave",n=>{e.setAttribute("material",{color:"crimson"})}),e.addEventListener("mousedown",e=>{}),e.sceneEl.addEventListener("object3dset",e=>{this.el.components.raycaster.refreshObjects()})}})}();var n={id:139,name:"Polkadot Shader",fragment:"// Gives us dFdx\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\n\nuniform vec3 cameraPosition;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float frequency;\nuniform float radius;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\n// Anti-alias step function\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, value);\n}\n \nvoid main() {\n    // Rotate the UV coord by 45 degrees. See \n    // https://en.wikipedia.org/wiki/Rotation_matrix#Common_rotations\n    vec2 st2 = mat2( 0.5, -0.5, 0.5, 0.5 ) * vUv;\n    vec2 nearest = 2.0 * fract( frequency * st2 ) - 1.0;\n    float dist = length( nearest );\n    \n    vec3 fragcolor = mix( color1, color2, aastep( radius, dist ) );\n    gl_FragColor = vec4( fragcolor, 1.0 );\n}",vertex:"/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",uniforms:{cameraPosition:{name:"cameraPosition",type:"v3",glslType:"vec3",description:""},time:{name:"time",type:"f",glslType:"float",description:""},color1:{name:null,type:"c",glslType:"vec3",value:{r:1,g:.5411764705882353,b:.7294117647058823},description:""},color2:{name:null,type:"c",glslType:"vec3",value:{r:0,g:0,b:0},description:""},frequency:{name:null,type:"f",glslType:"float",value:"10",description:""},radius:{name:null,type:"f",glslType:"float",value:"0.5",description:""}},url:"http://shaderfrog.com/app/view/139",user:{username:"andrewray",url:"http://shaderfrog.com/app/profile/andrewray"}},t={id:1068,name:"Sun Shader",fragment:"#define OCTAVES 2\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float brightness;\nuniform float sunSpots;\nuniform vec3 color;\nuniform vec2 speed;\nuniform vec2 resolution;\nvarying vec2 vUv;\nfloat rand(vec2 n) \n{\n    return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);\n}\nfloat noise(vec2 n) \n{\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nfloat fbm(vec2 n) \n{\n    float total = 0.0;\n    float amplitude = 2.0;\n    for (int i = 0;\n i < OCTAVES; i++) \n    {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.3;\n    }\n    return total;\n}\nvec3 tex(vec2 pos) \n{\n    vec3 c1 = (1.0 - sunSpots) * vec3(3.1, 0.0, 0.0);\n    vec3 c2 = vec3(c1);\n    vec3 c3 = vec3(c1);\n    vec3 c4 = vec3(3.0, 0.9, 0.0) * color;\n    vec3 c5 = vec3(c3);\n    vec3 c6 = vec3(c1);\n    vec2 p = pos;\n    float q = fbm(p + time * speed);\n    vec2 r = vec2(fbm(p + q + (time * speed.x) - p.x - p.y), fbm(p + p + (time * speed.y)));\n    vec3 c = color * (mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y));\n    return c;\n}\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(0.0);\n    vec2 p = (vUv - 0.5) * resolution;\n    vec3 col = tex(p);\n    Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(col * brightness, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_FragColor *= 1.0;\n}\nvoid main() \n{\n    gl_FragColor = (Surface_of_The_Sun1478777938883_101_main());}\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_Position = vec4(0.0);\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n    Surface_of_The_Sun1478777938883_101_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_Position *= 1.0;\n}\nvoid main() \n{\n    gl_Position = Surface_of_The_Sun1478777938883_101_main();}\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},resolution:{value:{x:"100",y:"100"},type:"v2",glslType:"vec2"},brightness:{value:"0.52098325",type:"f",glslType:"float"},speed:{value:{x:.9230769230769231,y:.9230769230769231},type:"v2",glslType:"vec2"},color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},sunSpots:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/1068",user:{username:"entropy",url:"http://shaderfrog.com/app/profile/andrewray"}},i={id:2901,name:"Jelly Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:"0",g:"0",b:"0"},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"2",type:"f",glslType:"float"},contrast:{value:"1.5",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:1,g:.2823529411764706,b:.4823529411764706},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:"0.4",type:"f",glslType:"float"},highlightColor:{value:{r:1,g:.5450980392156862,b:.23529411764705882},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:1,g:.5294117647058824,b:.8156862745098039},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2901",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},o={id:2894,name:"Green Dance",fragment:"#define PI 3.1415926535897932384626433832795\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float Flowing_Image_Combination1547651045656_420_speed;\nuniform float Flowing_Image_Combination1547651045656_420_resolution;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform vec3 Flowing_Image_Combination1547651045656_420_color;\nuniform vec3 Horizontal_Stripes1547651045669_423_color1;\nuniform vec3 Horizontal_Stripes1547651045669_423_color2;\nuniform float Horizontal_Stripes1547651045669_423_speed;\nuniform float Horizontal_Stripes1547651045669_423_multiplicationFactor;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color1;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color2;\nuniform float Checkerboard1547651045687_429_multiplicationFactor;\nuniform float Borg_Hull1547651045698_432_speed;\nuniform float Borg_Hull1547651045698_432_resolution;\nuniform vec3 Borg_Hull1547651045698_432_color;\nuniform float brightness;\nuniform float Disco_Dots1547651045724_435_speed;\nuniform vec2 Disco_Dots1547651045724_435_resolution;\nuniform vec3 Disco_Dots1547651045724_435_color;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvec2 circuit(vec2 p) \n    {\n        p = fract(p);\n        float r = 5.123;\n        float v = 0.0, g = 0.0;\n        r = fract(r * 9184.928);\n        float cp, d;\n        d = p.x;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.x - 1.0;\n        g += pow(clamp(3.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y - 1.0;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 10000.0);\n        const int iter = 20;\n        for (int i = 0;\n i < iter; i++) \n        {\n            cp = 0.5 + (r - 0.5) * 0.9;\n            d = p.x - cp;\n            g += pow(clamp(1. - abs(d), 0.0, 1.0), 200.0);\n            if (d > 0.0) \n            {\n                r = fract(r * 4829.013);\n                p.x = (p.x - cp) / (1.0 - cp);\n                v += 1.0;\n            }\n else \n            {\n                r = fract(r * 1239.528);\n                p.x = p.x / cp;\n            }\n            p = p.yx;\n        }\n        v /= float(iter);\n        return vec2(g, v);\n    }\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nfloat rand(vec2 co) \n    {\n        return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    }\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_FragColor = vec4(0.0);\n        vec2 uv = Flowing_Image_Combination1547651045656_420_vUv.xy * Flowing_Image_Combination1547651045656_420_resolution;\n        vec4 texCol = vec4(texture2D(image1, uv));\n        mat3 tfm;\n        tfm[0] = vec3(texCol.z, 0.0, 0);\n        tfm[1] = vec3(0.0, texCol.y, 0);\n        tfm[2] = vec3(0, 0, 1.0);\n        vec2 muv = (vec3(uv, 1.0) * tfm).xy + time * Flowing_Image_Combination1547651045656_420_speed;\n        texCol = vec4(vec3(texture2D(image2, muv)) * Flowing_Image_Combination1547651045656_420_color, 1.0);\n        Flowing_Image_Combination1547651045656_420_gl_FragColor = texCol;\n        return Flowing_Image_Combination1547651045656_420_gl_FragColor *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(0.0);\n        float x = fract((Horizontal_Stripes1547651045669_423_vUv.y + (time * Horizontal_Stripes1547651045669_423_speed)) * Horizontal_Stripes1547651045669_423_multiplicationFactor);\n        float f = smoothstep(0.40, 0.5, x) - smoothstep(0.90, 1.0, x);\n        Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(mix(Horizontal_Stripes1547651045669_423_color2, Horizontal_Stripes1547651045669_423_color1, f), 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_FragColor *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main(void) \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(0.0);\n        vec3 mixCol = mix(Vertical_2_Color_Graident1547651045681_426_color2, Vertical_2_Color_Graident1547651045681_426_color1, Vertical_2_Color_Graident1547651045681_426_vUv.y);\n        Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(mixCol, 1.);\n        return Vertical_2_Color_Graident1547651045681_426_gl_FragColor *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_FragColor = vec4(0.0);\n        vec2 t = Checkerboard1547651045687_429_vUv * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 p = vPosition * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 color;\n        if (mod(floor(t.x) + floor(t.y), 2.0) == 1.0) color = vec3(1.0, 1.0, 1.0);\n else color = vec3(0.0, 0.0, 0.0);\n        Checkerboard1547651045687_429_gl_FragColor = vec4(color, 1.0);\n        return Checkerboard1547651045687_429_gl_FragColor *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_FragColor = vec4(0.0);\n        float scale = 2.0;\n        vec2 uv = (Borg_Hull1547651045698_432_vUv.yx - 0.5) * Borg_Hull1547651045698_432_resolution;\n        uv = uv * scale + vec2(0.0, time * Borg_Hull1547651045698_432_speed);\n        vec2 cid2 = floor(uv);\n        float cid = (cid2.y * 10.0 + cid2.x) * 0.1;\n        vec2 dg = circuit(uv);\n        float d = dg.x;\n        vec3 col1 = (brightness - vec3(max(min(d, 2.0) - 1.0, 0.0) * 2.0 * 0.25)) * Borg_Hull1547651045698_432_color;\n        Borg_Hull1547651045698_432_gl_FragColor = vec4(col1, 1.0);\n        return Borg_Hull1547651045698_432_gl_FragColor *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main(void) \n    {\n        vec4 Disco_Dots1547651045724_435_gl_FragColor = vec4(0.0);\n        vec2 v = Disco_Dots1547651045724_435_vUv.xy * Disco_Dots1547651045724_435_resolution;\n        float brightness = fract(rand(floor(v)) + time * Disco_Dots1547651045724_435_speed);\n        brightness *= 0.5 - length(fract(v) - vec2(0.5, 0.5));\n        Disco_Dots1547651045724_435_gl_FragColor = vec4(2.0 * brightness * Disco_Dots1547651045724_435_color, 1.0);\n        return Disco_Dots1547651045724_435_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_Position = vec4(0.0);\n        Flowing_Image_Combination1547651045656_420_vUv = uv;\n        Flowing_Image_Combination1547651045656_420_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Flowing_Image_Combination1547651045656_420_gl_Position *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_Position = vec4(0.0);\n        Horizontal_Stripes1547651045669_423_vUv = uv;\n        Horizontal_Stripes1547651045669_423_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_Position *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main() \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_Position = vec4(0.0);\n        Vertical_2_Color_Graident1547651045681_426_vUv = uv;\n        Vertical_2_Color_Graident1547651045681_426_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Vertical_2_Color_Graident1547651045681_426_gl_Position *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_Position = vec4(0.0);\n        Checkerboard1547651045687_429_vUv = uv;\n        vPosition = position;\n        Checkerboard1547651045687_429_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Checkerboard1547651045687_429_gl_Position *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_Position = vec4(0.0);\n        Borg_Hull1547651045698_432_vUv = uv;\n        Borg_Hull1547651045698_432_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Borg_Hull1547651045698_432_gl_Position *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main() \n    {\n        vec4 Disco_Dots1547651045724_435_gl_Position = vec4(0.0);\n        Disco_Dots1547651045724_435_vUv = uv;\n        Disco_Dots1547651045724_435_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Dots1547651045724_435_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},image1:{value:null,type:"t",glslType:"sampler2D"},image2:{value:null,type:"t",glslType:"sampler2D"},Flowing_Image_Combination1547651045656_420_speed:{value:"0.1",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_resolution:{value:"2",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color1:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color2:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_speed:{value:"0",type:"f",glslType:"float"},Horizontal_Stripes1547651045669_423_multiplicationFactor:{value:"6",type:"f",glslType:"float"},Vertical_2_Color_Graident1547651045681_426_color1:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Vertical_2_Color_Graident1547651045681_426_color2:{value:{r:0,g:.9764705882352941,b:0},type:"c",glslType:"vec3"},Checkerboard1547651045687_429_multiplicationFactor:{value:"12",type:"f",glslType:"float"},brightness:{value:"0.25",type:"f",glslType:"float"},Borg_Hull1547651045698_432_speed:{value:"0.001",type:"f",glslType:"float"},Borg_Hull1547651045698_432_resolution:{value:"1",type:"f",glslType:"float"},Borg_Hull1547651045698_432_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Disco_Dots1547651045724_435_speed:{value:"0.01",type:"f",glslType:"float"},Disco_Dots1547651045724_435_resolution:{value:{x:"12",y:"12",z:0},type:"v2",glslType:"vec2"},Disco_Dots1547651045724_435_color:{value:{r:.5254901960784314,g:.9725490196078431,b:.6352941176470588},type:"c",glslType:"vec3"}},url:"http://shaderfrog.com/app/view/2894",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},r={id:2987,name:"Cosmic Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Glow_Effect1477532183055_216_main() + Noise_Ripples1477531959288_166_main() + Tiling_Caustic1477531952046_152_main() + Wiggly_Improved1477532051339_181_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:.08235294117647059,g:.06274509803921569,b:.19607843137254902},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:.4666666666666667,g:.9294117647058824,b:.9529411764705882},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"1",type:"f",glslType:"float"},contrast:{value:"1.4",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:.6823529411764706,g:.7725490196078432,b:.6666666666666666},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"0.2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:".5",type:"f",glslType:"float"},highlightColor:{value:{r:.8274509803921568,g:.5882352941176471,b:.2627450980392157},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:.9803921568627451,g:.9215686274509803,b:.596078431372549},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:.9921568627450981,g:.7254901960784313,b:.3411764705882353},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"2",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2987",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},a={};a.Polkadot_Shader=n,a.Sun_Shader=t,a.Jelly_Shader=i,a.Green_Dance_Shader=o,a.Cosmic_Shader=r,function(){function e(){}function n(){let e=arguments.length,n=arguments[0];if(e<2)return n;for(let t=1;t<e;t++){let e=arguments[t],i=Object.keys(e||{}),o=i.length;for(let t=0;t<o;t++){let o=i[t];n[o]=e[o]}}return n}function t(e){return n({},e)}function i(e,...n){let i,o,r=t(e);for(i=0;o=n[i++];)delete r[o];return r}e.prototype={mainCamera:null,cubeCameras:{},reserved:{time:null,cameraPosition:null},umap:{float:{type:"f",value:0},int:{type:"i",value:0},vec2:{type:"v2",value(){return new THREE.Vector2}},vec3:{type:"v3",value(){return new THREE.Vector3}},vec4:{type:"v4",value(){return new THREE.Vector4}},samplerCube:{type:"t"},sampler2D:{type:"t"}},getUmap(e){let n=this.umap[e].value;return"function"==typeof n?n():n},registerCamera(e){if(!(e instanceof THREE.Camera))throw new Error("Cannot register a non-camera as a camera!");this.mainCamera=e},registerCubeCamera(e,n){if(!n.renderTarget)throw new Error("Cannot register a non-camera as a camera!");this.cubeCameras[e]=n},unregisterCamera(e){if(e in this.cubeCameras)delete this.cubeCameras[e];else{if(e!==this.mainCamera)throw new Error("You never registered camera "+e);delete this.mainCamera}},updateSource(e,t,o){if(o=o||"name",!this.shaderTypes[e])throw new Error("Runtime Error: Cannot update shader "+e+" because it has not been added.");let r,a,l=this.add(e,t);for(a=0;r=this.runningShaders[a++];)r[o]===e&&(n(r.material,i(l,"id")),r.material.needsUpdate=!0)},renameShader(e,n){let t,i;if(!(e in this.shaderTypes))throw new Error("Could not rename shader "+e+" to "+n+". It does not exist.");for(this.shaderTypes[n]=this.shaderTypes[e],delete this.shaderTypes[e],t=0;i=this.runningShaders[t++];)i.name===e&&(i.name=n)},get(e){let n=this.shaderTypes[e];return n.initted||this.create(e),n.material},add(e,i){let o,r=t(i);r.fragmentShader=i.fragment,r.vertexShader=i.vertex,delete r.fragment,delete r.vertex;for(var a in r.uniforms)null===(o=r.uniforms[a]).value&&(r.uniforms[a].value=this.getUmap(o.glslType));return e in this.shaderTypes?n(this.shaderTypes[e],r):this.shaderTypes[e]=r,r},create(e){let n=this.shaderTypes[e];return delete n.id,n.material=new THREE.RawShaderMaterial(n),this.runningShaders.push(n),n.init&&n.init(n.material),n.material.needsUpdate=!0,n.initted=!0,n.material},updateRuntime(e,n,t){t=t||"name";let i,o,r,a;for(o=0;i=this.runningShaders[o++];)if(i[t]===e)for(r in n.uniforms)r in this.reserved||r in i.material.uniforms&&("t"===(a=n.uniforms[r]).type&&"string"==typeof a.value&&(a.value=this.cubeCameras[a.value].renderTarget),i.material.uniforms[r].value=n.uniforms[r].value)},updateShaders(e,n){let t,i;for(n=n||{},i=0;t=this.runningShaders[i++];){for(let e in n.uniforms)e in t.material.uniforms&&(t.material.uniforms[e].value=n.uniforms[e]);"cameraPosition"in t.material.uniforms&&this.mainCamera&&(t.material.uniforms.cameraPosition.value=this.mainCamera.position.clone()),"viewMatrix"in t.material.uniforms&&this.mainCamera&&(t.material.uniforms.viewMatrix.value=this.mainCamera.matrixWorldInverse),"time"in t.material.uniforms&&(t.material.uniforms.time.value=e)}},shaderTypes:a,runningShaders:[]},AFRAME.registerSystem("shader-frog",{init:function(){function n(){var e=document.querySelector("a-scene").systems.camera;e&&e.sceneEl&&e.sceneEl.camera&&(e=e.sceneEl.camera,t.frog_runtime.registerCamera(e))}this.frog_runtime=new e,this.clock=new THREE.Clock;var t=this,i=document.querySelector("a-scene");i.hasLoaded?n().bind(this):i.addEventListener("loaded",n)},tick:function(e){this.frog_runtime.updateShaders(this.clock.getElapsedTime())}}),AFRAME.registerComponent("shader-frog",{schema:{name:{type:"string"}},init:function(){this.originalMaterial=this.el.getObject3D("mesh").material,this.shaderData=a[this.data.name]},update:function(){this.system.frog_runtime.add(this.data.name,this.shaderData);var e=this.system.frog_runtime.get(this.data.name);this.el.getObject3D("mesh").material=e},remove:function(){this.el.getObject3D("mesh").material=this.originalMaterial}})}();const l=function(e,n,t="#e23fcf",i="#78F8EC",o="#6E4AE2"){this.container=e,this.size=window.innerWidth/9,this.strokeWidth=this.size/8,this.radius=this.size/2-this.strokeWidth/2,this.value=0,this.direction="up",this.svg,this.defs,this.slice,this.overlay,this.text,this.label,this.labelText=n,this.arrow,this.create(t,i,o)};l.prototype.create=function(e,n,t){this.createSvg(),this.createDefs(n,t),this.createSlice(),this.createOverlay(),this.createText(t),this.createLabel(e),this.container.appendChild(this.svg)},l.prototype.createSvg=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.setAttribute("width",this.size+"px"),e.setAttribute("height",this.size+"px"),this.svg=e},l.prototype.createDefs=function(e,n){var t=document.createElementNS("http://www.w3.org/2000/svg","defs"),i=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");i.setAttribute("id","gradient"+this.labelText);var o=document.createElementNS("http://www.w3.org/2000/svg","stop");o.setAttribute("stop-color",n),o.setAttribute("offset","0%"),i.appendChild(o);var r=document.createElementNS("http://www.w3.org/2000/svg","stop");r.setAttribute("stop-color",e),r.setAttribute("offset","100%"),i.appendChild(r);var a=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");a.setAttribute("id","gradient-background"),(o=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.2)"),o.setAttribute("offset","0%"),a.appendChild(o),(r=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.05)"),r.setAttribute("offset","100%"),a.appendChild(r),t.appendChild(i),t.appendChild(a),this.svg.appendChild(t),this.defs=t},l.prototype.createSlice=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("fill","none"),e.setAttribute("stroke",`url(#gradient${this.labelText})`),e.setAttribute("stroke-width",this.strokeWidth),e.setAttribute("transform","translate("+this.strokeWidth/2+","+this.strokeWidth/2+")"),e.setAttribute("class","animate-draw"),this.svg.appendChild(e),this.slice=e},l.prototype.createOverlay=function(){var e=this.size-this.size/2-this.strokeWidth/2,n=document.createElementNS("http://www.w3.org/2000/svg","circle");n.setAttribute("cx",this.size/2),n.setAttribute("cy",this.size/2),n.setAttribute("r",e),n.setAttribute("fill","url(#gradient-background)"),this.svg.appendChild(n),this.overlay=n},l.prototype.createText=function(e){var n=this.size/3.5,t=document.createElementNS("http://www.w3.org/2000/svg","text");t.setAttribute("x",this.size/2+n/7.5),t.setAttribute("y",this.size/2+n/4),t.setAttribute("font-size",n),t.setAttribute("fill",e),t.setAttribute("text-anchor","middle");var i=n/3;t.innerHTML='0<tspan font-size="'+i+'" dy="'+1.2*-i+'">%</tspan>',this.svg.appendChild(t),this.text=t},l.prototype.createLabel=function(e){let n=4.5;this.labelText.length>8&&(n=7);var t=this.size/n,i=document.createElementNS("http://www.w3.org/2000/svg","text");i.setAttribute("x",this.size/2),i.setAttribute("y",2*this.size/3+t/(n-1)),i.setAttribute("font-family","Century Gothic, Lato"),i.setAttribute("font-size",t),i.setAttribute("fill",e),i.setAttribute("text-anchor","middle"),i.innerHTML=this.labelText,this.svg.appendChild(i),this.label=i},l.prototype.createArrow=function(){var e,n,t=this.size/10;"up"===this.direction?(e=t/2,n=-1):"down"===this.direction&&(e=0,n=1);var i=this.size/2-t/2,o=this.size-this.size/3+e,r=n*(t/1.5),a=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttribute("d","M 0 0 "+t+" 0 "+t/2+" "+r+" 0 0 Z"),a.setAttribute("fill","#97F8F0"),a.setAttribute("opacity","0.6"),a.setAttribute("transform","translate("+i+","+o+")"),this.svg.appendChild(a),this.arrow=a},l.prototype.animateStart=function(){var e=0,n=this,t=setInterval(function(){var i=+(e/n.value).toFixed(2);(e+=i<.95?2-2*i:.05)>=+n.value&&(e=n.value,clearInterval(t)),n.setValue(e)},10)},l.prototype.animateTo=function(e){var n=this.value,t=this,i=setInterval(function(){var o=n>e?+(e/n).toFixed(2):+(n/e).toFixed(2),r=o<.95?2-2*o:.05;e<n?(n-=r)<=-e&&(t.value=e,clearInterval(i)):(n+=r)>=+e&&(t.value=e,clearInterval(i)),t.setValue(n)},10)},l.prototype.animateReset=function(){this.setValue(0)},l.prototype.polarToCartesian=function(e,n,t,i){var o=(i-90)*Math.PI/180;return{x:e+t*Math.cos(o),y:n+t*Math.sin(o)}},l.prototype.describeArc=function(e,n,t,i,o){var r=this.polarToCartesian(e,n,t,o),a=this.polarToCartesian(e,n,t,i),l=o-i<=180?"0":"1";return["M",r.x,r.y,"A",t,t,0,l,0,a.x,a.y].join(" ")},l.prototype.setValue=function(e){var n=e/100*360;360===n&&(n=359.99);var t=this.size/2-this.strokeWidth/2,i=this.describeArc(t,t,t,180,180+n);this.slice.setAttribute("d",i);var o=this.size/3.5/3;this.text.innerHTML=Math.floor(e)+'<tspan font-size="'+o+'" dy="'+1.2*-o+'">%</tspan>'};class s{constructor(e,n="label",t="white",i=0,o=0,r=1,a=.25,l=.75,s=.8){this.widget=document.createElement("div"),this.widget.style.fontSize=window.innerWidth/9/4.5+"px",this.widget.style.marginTop=window.innerWidth/81+"px",this.widget.style.marginBottom=window.innerWidth/81+"px",this.widget.style.color=t,this.min=parseFloat(o),this.max=parseFloat(r),this.range=r-o,this.el=document.createElement("meter"),this.el.setAttribute("value",i),this.el.setAttribute("min",o),this.el.setAttribute("max",r),this.el.setAttribute("low",a),this.el.setAttribute("high",l),this.el.setAttribute("optimum",s),this.el.style.width=window.innerWidth/8+"px",this.el.style.height=window.innerWidth/32+"px",this.widget.appendChild(this.el),this.label=document.createElement("div"),this.label.style.textAlign="center",this.label.innerHTML=n,this.widget.appendChild(this.label),e.appendChild(this.widget)}animateTo(e){var n=parseFloat(this.el.getAttribute("value")),t=this.el;t.range=this.range;var i=setInterval(function(){var o=n>e?+(e/n).toFixed(4):+(n/e).toFixed(4),r=o<.95?t.range/30-t.range/30*o:.003;e<n?(n-=r)<=-e&&(t.value=e,clearInterval(i)):(n+=r)>=+e&&(t.value=e,clearInterval(i)),t.value=n},10)}}var _=e=>{function n(e){let n={};{let t=document.createElement("div");t.style.position="relative",t.style.left="0px",t.style.top="0px",t.style.width=window.innerWidth+"px",t.style.height=window.innerWidth/8+"px",n.top=t,e.appendChild(t)}return n}window.addEventListener("load",function(){e.hud={};let t=n(document.querySelector("#hud"));e.hud.healthDial=new l(t.top,"health","#ccc","white","red"),e.hud.statusDial=new l(t.top,"status","#ccc","white","lime"),e.hud.magicDial=new l(t.top,"magic","#ccc","white","#b45ef9"),e.hud.oxygenMeter=new s(t.top,"oxygen","#ccc",.9),setInterval(n=>{e.hud.healthDial.animateTo(100*Math.random());e.hud.statusDial.animateTo(100*Math.random());e.hud.magicDial.animateTo(100*Math.random());e.hud.oxygenMeter.animateTo(Math.random())},4e3)})},c={gameName:"The Kingdom of Castle Bridge",emoji:"🏰",favicon:"https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2Fcoin.gif?1543018269225",theme:{fontFamily:"New Rocker",titleFontColor:"#f2d15c",formFontColor:"white",formColor:"#0f3917",overlayColor:"rgba(0,0,0, 0.7)",fontSize:2},avatar:{models:[{url:"https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_orange.glb?1543069720785",scale:.62,yOffset:-1.3,animations:{idle:"Dragon_Flying"},msg:{color:"orange",offset:"0 2 -0.51"},thruster:{innerColor:"red",outerColor:"white"}},{url:"https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_blue.glb?1543070759125",scale:.62,yOffset:-1.3,animations:{idle:"Dragon_Flying"},msg:{color:"blue",offset:"0 2 -0.51"},thruster:{innerColor:"blue",outerColor:"white"}},{url:"https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2FDragon_eyes.glb?1543064526277",scale:.62,yOffset:-1.3,animations:{idle:"Dragon_Flying"},msg:{color:"black",offset:"0 2 -0.51"},thruster:{innerColor:"black",outerColor:"white"}}],buttonFaces:["https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_orange.png?1543070170738","https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_blue.png?1543070754969","https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2Fdragon.png?1543064467876"],buttonColor:"#fff",speed:140},sounds:{playerJoined:{url:"https://cdn.glitch.com/46b18376-7fa5-4e04-bd26-296207b88a74%2Ffanfare_with_timpani.mp3?1546619687984"},playerLeft:{url:"https://cdn.glitch.com/7f007e49-e78d-40b6-964d-097554282381%2Ffarewell.mp3?1545526194837"},yay:{url:"https://cdn.glitch.com/162b879e-fd42-40d9-8519-671d783b8c70%2Fyay.mp3?1538839840045",loop:!1,volume:.8},splashIn:{url:"https://cdn.glitch.com/b10e1289-ada6-412c-a444-83b2ee39c4a0%2FsplashIn.mp3?1544623314600",loop:!1,volume:.8},splashOut:{url:"https://cdn.glitch.com/b10e1289-ada6-412c-a444-83b2ee39c4a0%2FsplashOut.mp3?1544623312237",loop:!1,volume:.8},hyperspace:{url:"https://cdn.glitch.com/7f007e49-e78d-40b6-964d-097554282381%2Fhyperspace.mp3?1545441819724",loop:!1,volume:1}},environment:{preset:"default",seed:.3,shadow:!0,playArea:1,shadow:!0,shadowSize:10,dressing:"",dressingAmount:10,dressingColor:"",dressingScale:15,dressingVariance:"20 30 40",dressingUniformScale:!1,fog:.4,flatShading:!1,skyType:"",horizonColor:"",skyColor:"",ground:"",groundYScale:5,groundTexture:"walkernoise",groundColor:"#032d26",groundColor2:"#564d19",grid:"",gridColor:"",lighting:"",lightPosition:""},bgm:{songs:[95999380],volume:.05,playAll:!0,initialDelay:5e3},releasePointerLockOnUI:!0,keys:{toggleUI:"Equal",nextSong:"KeyP",toggleMute:"Digit0",toggleCursor:"KeyC"},showCursor:!1,voice:{name:"Oliver",rate:1,pitch:1,volume:1,welcomeDelay:2e3},physics:{gravity:-9.8,maxGrabDistance:40,objects:[{name:"Blue Sphere",geometry:"primitive: sphere; radius: 2",position:"50 75 -40",color:"#00f"},{name:"Red Sphere",geometry:"primitive: sphere; radius: 2",position:"60 75 -40",color:"#f00"},{name:"Green Sphere",geometry:"primitive: sphere; radius: 2",position:"70 75 -40",color:"#0f0"}]},collectibles:{itemDefs:[{type:"doge_coin",scale:"0.4 0.4 0.4",rotation:"0 0 0",threshold:3,positions:["15 0 -30","-15 0 -30","12 0 -35","-12 0 -35","9 0 -40","-9 0 -40","6 0 -45","-6 0 -45","15 0 -65","-15 0 -65","12 0 -60","-12 0 -60","9 0 -55","-9 0 -55","6 0 -50","-6 0 -50"],url:"https://cdn.glitch.com/14597f75-728f-4d7e-bbd2-202118ee70e0%2Fdoge_coin.glb?1542836614183",collectSound:{url:"https://cdn.glitch.com/14597f75-728f-4d7e-bbd2-202118ee70e0%2Fcollect_bark_.mp3?1542837713162",volume:1},collectParticles:{type:"magic",color:"#fff",scale:4},callback:{name:"addPoints",params:{amount:100}},animation:{type:"rotY"}}]},readouts:{itemDefs:[{type:"scoreboard",scale:"16 10 0.1",color:"#a80003",positions:["-79 48 -30","50 48 -30"],rotations:["0 30 0","0 30 0"],textAttributes:{value:"Welcome to\nCastle Bridge",color:"white",scale:"9 9 1",align:"center",shader:"msdf",position:"0 -1.5 0",font:"https://raw.githubusercontent.com/etiennepinchon/aframe-fonts/master/fonts/newrocker/NewRocker-Regular.json"}},{type:"instructions",scale:"4 1.5 0.1",color:"#a80003",positions:["1 2 -35"],rotations:["0 0 0"],textAttributes:{value:`Ye Olde Game Instructions:\n=========================\n1) Collect Doge Coins to earn credits.\n2) Spend your credits to ride the teleporters.\n3) Be Friendly!`,color:"white",scale:"0.7 0.7 1",align:"left",shader:"msdf",position:"-1.5 0 0",font:"https://raw.githubusercontent.com/etiennepinchon/aframe-fonts/master/fonts/newrocker/NewRocker-Regular.json"}}]},mobile:{thruster_icon:"https://cdn.glitch.com/162b879e-fd42-40d9-8519-671d783b8c70%2Fjump_fly_btn.png",joystick_outer_color:"rgba(5, 31, 101, 0.2)",joystick_inner_color:"rgba(5, 31, 101, 0.4)"},vr:!1},p=e=>{AFRAME.registerComponent("game",{schema:{mode:{type:"string",default:"standard"}},init:function(){e.game=this,this.hasBegun=!1,this.config=c,document.querySelector("#scene-container").style.display="block",document.querySelector("#loading-screen").style.display="none"},tick:function(e,n){}})},v=e=>{let n=e.socket=io();n.on("connect",()=>{console.log(`socket connected with id: ${n.id}`);console.log("Client.js can initialize my playerData now.");n.playerData={position:{},rotation:{},faceIndex:0};n.lastPlayerData={position:{},rotation:{},faceIndex:0};e.game.login=((e,t)=>{n.emit("login",{name:e,pw:t})});n.on("login-results",e=>{console.log(e);e.success?document.querySelector("#login").style.zIndex=-1:document.getElementById("login-msg").innerHTML=e.msg})})};(()=>{window.onload=(e=>{`\n<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;">\n    <div class="modal-dialog">\n\t\t  <div class="loginmodal-container">\n\t\t\t\t\t<h1>CS1</h1><br>\n\t\t\t\t  <form id="login-form">\n\t\t\t\t\t  <input id="name" type="text" name="user" placeholder="Username">\n\t\t\t\t\t  <input id="pw" type="password" name="pass" placeholder="Password">\n\t\t\t\t\t  <input id="login-submit" type="submit" name="login" class="login loginmodal-submit" >\n            <div id='login-msg'></div>\n\t\t\t\t  </form>\n\t\t\t</div>\n\t</div>\n</div>\n`;let n=document.querySelector("#login");n.innerHTML=`\n<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;">\n    <div class="modal-dialog">\n\t\t  <div class="loginmodal-container">\n\t\t\t\t\t<h1>CS1</h1><br>\n\t\t\t\t  <form id="login-form">\n\t\t\t\t\t  <input id="name" type="text" name="user" placeholder="Username">\n\t\t\t\t\t  <input id="pw" type="password" name="pass" placeholder="Password">\n\t\t\t\t\t  <input id="login-submit" type="submit" name="login" class="login loginmodal-submit" >\n            <div id='login-msg'></div>\n\t\t\t\t  </form>\n\t\t\t</div>\n\t</div>\n</div>\n`;setTimeout(e=>{CS1&&CS1.socket.connected||(document.getElementById("login-msg").innerHTML="OFFLINE MODE",document.getElementById("login-submit").setAttribute("value","Play Game Offline"))},1e3);document.getElementById("login-form").addEventListener("submit",function(e){e.preventDefault(),CS1&&CS1.socket.connected?document.getElementById("name").value.length>0&&document.getElementById("pw").value.length>0&&(CS1.game.login(document.getElementById("name").value,document.getElementById("pw").value),document.getElementById("name").value="",document.getElementById("pw").value=""):n.style.zIndex=-1})})})();let m=window.CS1={};_(m),p(m),v(m),console.log("FIRING UP THE MAINS!")}();
//# sourceMappingURL=bundle.js.map
